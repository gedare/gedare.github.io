
@inproceedings{bloom_lockdown:_2016,
	address = {New York, NY, USA},
	series = {{EuroSec} '16},
	title = {{LockDown}: {An} {Operating} {System} for {Achieving} {Service} {Continuity} by {Quarantining} {Principals}},
	isbn = {978-1-4503-4295-7},
	shorttitle = {{LockDown}},
	url = {http://doi.acm.org/10.1145/2905760.2905764},
	doi = {10.1145/2905760.2905764},
	abstract = {This paper introduces quarantine, a new security primitive for an operating system to use in order to protect information and isolate malicious behavior. Quarantine's core feature is the ability to fork a protection domain on-the-fly to isolate a specific principal's execution of untrusted code without risk of a compromise spreading. Forking enables the OS to ensure service continuity by permitting even high-risk operations to proceed, albeit subject to greater scrutiny and constraints. Quarantine even partitions executing threads that share resources into isolated protection domains. We discuss the design and implementation of quarantine within the LockDown OS, a security-focused evolution of the Composite component-based microkernel OS. Initial performance results for quarantine show that about 98\% of the overhead comes from the cost of copying memory to the new protection domain.},
	urldate = {2016-08-08},
	booktitle = {Proceedings of the 9th {European} {Workshop} on {System} {Security}},
	publisher = {ACM},
	author = {Bloom, Gedare and Parmer, Gabriel and Simha, Rahul},
	year = {2016},
	keywords = {access control, confinement, microkernel, protection},
	pages = {7:1--7:6}
}